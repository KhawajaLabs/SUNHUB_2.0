package com.buyproduct.java;

import static org.testng.Assert.*;

import java.awt.Desktop.Action;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

import com.baseclass.pages.BaseClass;
import com.util.pages.Utility;

public class buyproduct extends BaseClass
{
	int randomNumber;
	String serviceName = null;
	Actions action = new Actions(driver);


	@FindBy(xpath = "//*[@id=\"root\"]/div[1]/div[1]/div[2]/div/div/div[1]/div[2]/div[1]/div[2]/div/div[3]/div/div[3]/div[2]/button")
	WebElement addtocartclick;

	@FindBy(xpath = "//*[@id=\"root\"]/div[1]/header/div[2]/div/div/div[2]/div/div[3]/div/div/a/span[2]")
	WebElement carticonclick;

	@FindBy(xpath = "//*[@id=\"root\"]/div[1]/header/div[2]/div/div/div[2]/div/div[3]/div/div/div/div[3]/a[2]/span")
	WebElement checkoutclick;

	@FindBy(xpath = "//*[@id=\"root\"]/div[1]/div[1]/div[2]/div/div/div/aside/div[1]/button")
	WebElement PlaceOrder;
	
	@FindBy(xpath = "//*[@id=\"rw_7_input\"]/div[1]")
	WebElement serviceClick;
	@FindBy(xpath = "//*[@id=\"rw_7_input\"]/div[2]/div/div/div")
	List<WebElement> service;
	
	@FindBy(xpath = "//*[@id=\"root\"]/div[1]/div[2]/div/div")
	WebElement errorMessageCheckForNoService;
	
	@FindBy(xpath = "//*[@id=\"rw_23_input\"]")
	WebElement Fedexserviceclick;
	
	


	
	
	
	@FindBy(xpath = "//*[@id=\"q\"]")
	WebElement searchField;
	
	
	
	public buyproduct() 
	{
		PageFactory.initElements(driver, this);	
	}

	public void checkoutWtihService() throws Exception 
	{
		Thread.sleep(4000);
		addtocartclick.click();
		Thread.sleep(2000);
		carticonclick.click();
		Thread.sleep(2000);
		checkoutclick.click();
		Thread.sleep(4000);
		serviceClick.click();
		Thread.sleep(2000);

		if(service.size() > 2)
		{
			randomNumber = Utility.rand();
			System.out.println("Service size is : " +  service.size());
			System.out.println("Random number generated by the system is : " +  randomNumber);

			try 
			{
				for(int i=0; i<=service.size() ; i++)
				{
					if(service.get(i).getText().equalsIgnoreCase(service.get(randomNumber).getText()))
					{
						//System.out.println("Options we have in services are : " + service.get(i).getText());
						serviceName = service.get(i).getText();
						System.out.println("Selected service by the system is : " +  serviceName);
						service.get(i).click();
						break;
					}
				}
			}
			catch(Exception indexoutofboundException)
			{
				throw indexoutofboundException;
			}

			if(serviceName.contentEquals("Fedex"))
			{
				//We  have to write a code here incase if Fedex is selected.
				randomNumber = Utility.rand();
				
				
				System.out.println("Selcted Service randomly by System is : " + serviceName);
			}
			else
			{
				System.out.println("asdoifuoasiufioasufiouaiofuasiofuoiasudfioasudfiouasiofuioasufiosudfiosdu");
				action.moveToElement(PlaceOrder);
				Thread.sleep(2000);
				PlaceOrder.click();
			}
		}

		if(service.size() == 2)
		{
			System.out.println("Service size is : " +  service.size());
			for(int i=0; i<=service.size() ; i++)
			{
				if(service.get(i).getText().contains("Local"))
				{
					//System.out.println("Options we have in services are : " + service.get(i).getText());
					
			
					
					service.get(i).click();
					break;
				}
			}
			action.moveToElement(PlaceOrder);
			Thread.sleep(2000);
			PlaceOrder.click();
		}
	}


	public void errorMessageCheckoutWtihoutService() throws Exception 
	{
		Thread.sleep(4000);
		addtocartclick.click();
		Thread.sleep(2000);
		carticonclick.click();
		Thread.sleep(2000);
		checkoutclick.click();
		Thread.sleep(4000);

		action.moveToElement(PlaceOrder);
		Thread.sleep(2000);
		PlaceOrder.click();
		Thread.sleep(2000);
		
		String errorMEssageText = errorMessageCheckForNoService.getText();
		System.out.println(errorMEssageText);
		assertTrue(errorMessageCheckForNoService.isDisplayed(), "Error Message did not appear");
	}
	
	public void verifyQuantityAddedInCart() 
	{
		// Find webelement  having value 12 while mouse hovering a cart. If quantity found then success otherwise fail.
	}
	
	public void verifyTotalAmountInCart() 
	{
		// Find webelement  having total added quantity multiply by the price per item, while mouse hovering a cart. If quantity found then success otherwise fail.
	}
	
	public void verifyTaxAmountInCart() 
	{
		// Verify total tax added after selecting a shipping method in case if a shipping service 
	}
	
	
	public void ProductSearch() throws Exception
	{
		Thread.sleep(2000);
		searchField.sendKeys("120w alusol aluminium series", Keys.RETURN);
	}
	
}





