package com.sunhub.GuestCheckout.pages;

import static org.junit.Assert.assertTrue;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.bind.ParseConversionEvent;
import javax.xml.xpath.XPath;

import org.apache.commons.collections.iterators.ArrayListIterator;
import org.hamcrest.core.IsNot;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.lowagie.text.List;
import com.lowagie.text.pdf.hyphenation.TernaryTree.Iterator;
import com.sunhub.qa.base.BaseClass;
import com.sunhub.qa.testdata.TestData;
import com.sunhub.qa.util.TestUtil;

import net.bytebuddy.description.annotation.AnnotationList.Empty;

public class GuestCheckoutFlow extends BaseClass
{
	TestData td;

	//Page Factory - OR:

	@FindBy(xpath = "//*[@id=\"main-navbar\"]/div/div/div/ul/li[1]/a") 
	WebElement categoryClick;

	@FindBy(xpath = "//*[@id='increase']")
	WebElement increaseQuantity;

	@FindBy(xpath = "//*[@id=\"products\"]/div[1]/div/div[2]/div[3]/div/a[1]")
	WebElement addToCart;

	@FindBy(xpath = "//*[@id=\"shoppingcartddmain\"]/div/div/div/div[3]/div[2]") 
	WebElement viewcart;

	@FindBy(xpath = "//*[@id=\"content\"]/div/div/div[2]/a[1]") 
	WebElement gotoCheckout;


	/* ----------------- Shipping and billing information fields --------------- */

	@FindBy(xpath = "//*[@id=\"SHIPPING_FNAME\"]")
	WebElement fn;

	@FindBy(xpath = "//*[@id=\"SHIPPING_LNAME\"]")
	WebElement ln;

	@FindBy(xpath = "//*[@id=\"SIGNUP_CHECKOUT_EMAIL\"]")
	WebElement email;

	@FindBy(xpath = "//*[@id=\"SHIPPING_STREET\"]")
	WebElement address;

	@FindBy(xpath = "//*[@id=\"SHIPPING_CITY\"]")
	WebElement city;

	@FindBy(xpath = "//*[@id=\"SHIPPING_ZIP\"]")
	WebElement zip;

	@FindBy(xpath = "//*[@id=\"SHIPPING_PHONE\"]")
	WebElement phone;

	@FindBy(xpath = "//*[@id=\"sameaddress\"]")
	WebElement sameAsBilling;

	@FindBy(xpath = "//*[@id=\"checkout-ptc-check\"]")
	WebElement confirmation;

	/************************** This is a Country drop down handling part **************************/	

	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[1]/div/button")	
	WebElement coun;
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[1]/div/div/div/ul/li")		
	java.util.List<WebElement> country;	

	/************************** This is a Country drop down handling part **************************/	

	/************************** This is a State drop down handling part **************************/	
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/div/div[2]/ul/li")		  
	java.util.List<WebElement> state; 		
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div")	
	WebElement StateClick;	
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/button/div/div/div")	
	WebElement SelectedState;	



	/************************** This is a State drop down handling part **************************/	

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[3]/p")		  
	WebElement service;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[4]/div")		  
	WebElement selectServiceClick;
	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[4]/div/div/div/ul/li")		   
	java.util.List<WebElement> selectService;	
	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[4]/div/button/div/div/div")
	WebElement selectedService;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[6]/div/button")	
	WebElement shipbyClick;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[6]/div/div/div/ul/li")		  
	java.util.List<WebElement> shipbySelect;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[6]/div/button/div/div/div")
	WebElement selectedShipment;


	@FindBy(xpath = "//*[@id=\"stripe-btn\"]")		  
	WebElement payWithStripeBtn;


	@FindBy(xpath = "//*[@id=\"2ce624a0-85bf-11eb-b278-57b007f1d8c3\"]")		  
	WebElement stripeEmail;

	@FindBy(xpath = "//*[@id=\"a6bf53c0-81c1-11eb-894b-ffa1ff554333\"]")		  
	WebElement stripeCardNo;

	@FindBy(xpath = "//*[@id=\"a6bfa1e0-81c1-11eb-894b-ffa1ff554333\"]")		  
	WebElement stripeExpiry;

	@FindBy(xpath = "//*[@id=\"a6bfa1e1-81c1-11eb-894b-ffa1ff554333\"]")		  
	WebElement stripeCVC;

	@FindBy(xpath = "//*[@id=\"container\"]/section/span[2]/div/div/main/form/div/div/div/div/div/div[2]/div/div/fieldset/span[1]/a/div")		  
	WebElement stripeRemember;

	@FindBy(xpath = "//*[@id=\"container\"]/section/span[2]/div/div/main/form/nav/div/div/div/button")		  
	WebElement stripeFinalPayment;

	@FindBy(xpath = "//*[@id=\"container\"]/section/span[2]/div/div[@class='Modal-animationWrapper']")		  
	String modalPopup;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[1]/ul/li[3]")
	WebElement tax;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[1]/ul/li[3]")
	WebElement Stringtax;

	String taxVerifi;
	String serviceName;
	String ExemptedStates;



	//Constructor for Initializing the Page Objects
	public GuestCheckoutFlow() throws Throwable
	{
		PageFactory.initElements(driver, this); 
	}

	public void NonExistingUserGuest(String fname, String lname, String eml, String add, String cty, String zp, String phn) throws InterruptedException
	{
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		categoryClick.click();
		Thread.sleep(10000);
		increaseQuantity.click();
		Thread.sleep(2000);
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		addToCart.click();
		Thread.sleep(2000);
		viewcart.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		gotoCheckout.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		fn.sendKeys(fname);
		ln.sendKeys(lname);
		email.sendKeys(eml);
		address.sendKeys(add);
		city.sendKeys(cty);
		zip.sendKeys(zp);
		phone.sendKeys(phn);
		Thread.sleep(2000);
		confirmation.click();	
		Thread.sleep(3000);

		coun.click();	
		Thread.sleep(2000);
		try 
		{
			for(int i=0; i<=country.size() ; i++)
			{
				if(country.get(i).getText().contains("United"))
				{
					country.get(i).click();
					break;
				}
			}
		}
		catch(Exception indexoutofboundException)
		{
			throw indexoutofboundException;
		}

		Thread.sleep(1000);
		StateClick.click();	
		Thread.sleep(1000);	

		for(int i=0; i<=state.size(); i++)
		{
			System.out.println(state.get(i).getText());				

			if(state.get(i).getText().contains("Arizona")) 
			{ 
				state.get(i).click(); 
				break; 
			}			 

		}


		/***********************Service and Shipping Selection************************/	


		Thread.sleep(3000);
		sameAsBilling.click();

		Thread.sleep(1000);
		if(service.isDisplayed())
		{	
			Thread.sleep(1000);
			selectServiceClick.click();
			Thread.sleep(2000);

			for(int i=0; i<=selectService.size(); i++)
			{
				if(selectService.get(i).getText().contains("Fed"))
				{
					selectService.get(i).click();
					break;
				}
			}		


			Thread.sleep(2000);			
			shipbyClick.click();
			Thread.sleep(2000);

			for(int i=0; i<=shipbySelect.size(); i++)
			{
				System.out.println(shipbySelect.get(i).getText());

				if(shipbySelect.get(i).getText().contains("Grou"))
				{
					shipbySelect.get(i).click();
					break;
				}
				else if(shipbySelect.get(i).getText().contains("Prio"))
				{
					shipbySelect.get(i).click();
					break;
				}		
				else if(shipbySelect.get(i).getText().contains("Econ"))
				{
					shipbySelect.get(i).click();
					break;
				}
				else if(shipbySelect.get(i).getText().contains("2Day"))
				{
					shipbySelect.get(i).click();
					break;
				}
				else if(shipbySelect.get(i).getText().contains("2Day AM"))
				{
					shipbySelect.get(i).click();
					break;
				}
				else if(shipbySelect.get(i).getText().contains("Express Saver"))
				{
					shipbySelect.get(i).click();
					break;
				}
			}


			/***********************Service and Shipping Selection************************/	



			/* payWithStripeBtn.click(); Thread.sleep(3000);
		  driver.switchTo().window(modalPopup); 
		  Thread.sleep(2000);
		  stripeEmail.sendKeys(prop.getProperty("stripeEmail"));*/



			//*[@id="container"]/section/span[2]/div/div[@class='Modal-animationWrapper']

			/*
			 * Set<String> handler = driver.getWindowHandles(); java.util.Iterator<String>
			 * it = handler.iterator();
			 * 
			 * String parentWindow = it.next(); System.out.println("Parent " +
			 * parentWindow); String childWindow = it.next(); System.out.println("Child " +
			 * childWindow);
			 * 
			 * driver.switchTo().window(childWindow);
			 * stripeEmail.sendKeys(prop.getProperty("stripeEmail"));
			 */

			/*
		Thread.sleep(1000);
		stripeCardNo.click();
		stripeCardNo.sendKeys(prop.getProperty("stripeCardno"));
		Thread.sleep(1000);
		stripeCVC.click();
		stripeCVC.sendKeys(prop.getProperty("stripeCVC"));
		Thread.sleep(1000);
		stripeExpiry.click();
		stripeExpiry.sendKeys(prop.getProperty("stripeExpiry"));
		Thread.sleep(1000);

		if(!stripeRemember.isSelected())
		{			
			stripeRemember.click();
		}
		else
		{
			stripeFinalPayment.click();
		}*/

		}
	}



	public void Tax(String fname, String lname, String eml, String add, String cty, String zp, String phn) throws InterruptedException
	{
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		categoryClick.click();
		Thread.sleep(10000);
		increaseQuantity.click();
		Thread.sleep(2000);
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		addToCart.click();
		Thread.sleep(2000);
		viewcart.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		gotoCheckout.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		fn.sendKeys(fname);
		ln.sendKeys(lname);
		email.sendKeys(eml);
		address.sendKeys(add);
		city.sendKeys(cty);
		zip.sendKeys(zp);
		phone.sendKeys(phn);
		Thread.sleep(2000);
		confirmation.click();	
		Thread.sleep(3000);

		coun.click();	
		Thread.sleep(2000);
		try 
		{
			for(int i=0; i<=country.size() ; i++)
			{
				if(country.get(i).getText().contains("United"))
				{
					country.get(i).click();
					break;
				}
			}
		}
		catch(Exception indexoutofboundException)
		{
			throw indexoutofboundException;
		}

		Thread.sleep(1000);
		StateClick.click();	
		Thread.sleep(1000);	

		for(int i=0; i<=state.size(); i++)
		{
			if(state.get(i).getText().contains("Alaska")) 
			{ 
				state.get(i).click(); 
				break; 
			}		
		}


		/***********************Service and shipping Selection************************/	


		Thread.sleep(3000);
		sameAsBilling.click();

		Thread.sleep(1000);
		if(service.isDisplayed())
		{	
			Thread.sleep(1000);
			selectServiceClick.click();
			Thread.sleep(2000);

			for(int i=0; i<=selectService.size(); i++)
			{
				if(selectService.get(i).getText().contains("Fed"))
				{
					selectService.get(i).click();
					break;
				}
			}

			if(selectedService.getText().contentEquals(prop.getProperty("service_type_two")))
			{
				Thread.sleep(2000);			
				shipbyClick.click();
				Thread.sleep(2000);

				for(int i=0; i<=shipbySelect.size(); i++)
				{
					System.out.println(shipbySelect.get(i).getText());
					
					int[] rates = new rates[100]; 
					
					

					/*if(shipbySelect.get(i).getText().contains("Grou"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("Prio"))
					{
						shipbySelect.get(i).click();
						break;
					}		
					else if(shipbySelect.get(i).getText().contains("Econ"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("2Day"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("2Day AM"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("Express Saver"))
					{
						shipbySelect.get(i).click();
						break;
					}*/
				}
			}

			/****************** Tax Verification ********************/			

			int option = 0;

			if(selectedService.getText().contentEquals(prop.getProperty("service_type_one")))
			{
				option = 1;
			}
			else if(selectedService.getText().contentEquals(prop.getProperty("service_type_two")))
			{
				option = 2;
			}

			switch(option)
			{
			case 1:
				System.out.println("This is Local Pickup. There is no TAX. :)");
				break;			

			case 2:
				System.out.println("Selected State is " + SelectedState.getText());

				try 
				{
					for(int i=0; i<=TestData.ExemptedStateList.length; i++)
					{	
						if(TestData.ExemptedStateList[i].contentEquals(SelectedState.getText()))
						{
							System.out.println(TestData.ExemptedStateList[i].toString()+ " is exempted from TAX");
							break;
						}
						else
						{
							System.out.println("This is selected TAX : " + tax.getText());				            
							int actualTax = TestUtil.testTax(tax.getText().toString());						            
							assertTrue(actualTax==0, "Tax is greater than ZERO :(");      
							break;
						}
					}
				}
				catch(Exception e)
				{

				}

				break;


			}
		}
		/****************** Tax Verification ********************/	
	}	
}
