package com.sunhub.GuestCheckout.pages;

import static org.junit.Assert.assertTrue;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.bind.ParseConversionEvent;
import javax.xml.xpath.XPath;

import org.apache.commons.collections.iterators.ArrayListIterator;
import org.hamcrest.core.IsNot;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.lowagie.text.List;
import com.lowagie.text.pdf.hyphenation.TernaryTree.Iterator;
import com.sunhub.qa.base.BaseClass;
import com.sunhub.qa.testdata.TestData;
import com.sunhub.qa.util.TestUtil;

import net.bytebuddy.description.annotation.AnnotationList.Empty;

public class GuestCheckoutFlow extends BaseClass
{
	TestData td;

	//Page Factory - OR:

	@FindBy(xpath = "//*[@id=\"main-navbar\"]/div/div/div/ul/li[1]") 
	WebElement categoryClick;

	@FindBy(xpath = "//*[@id=\'products\']/div[3]/div/div[2]/div[3]/div/div/div/a[@id=\'increase\']")
	WebElement increaseQuantity;

	@FindBy(xpath = "//*[@id=\"products\"]/div[4]/div/div[2]/div[3]/div/a[1]")
	WebElement addToCart;

	@FindBy(xpath = "//*[@id=\'shoppingcartddmain\']/div/div/div/div[3]/div[2]") 
	WebElement viewcart;

	@FindBy(xpath = "//*[@id=\'content\']/div/div/div[2]/a[1]") 
	WebElement gotoCheckout;


	/* ----------------- Shipping and billing information fields --------------- */

	@FindBy(xpath = "//*[@id=\"SHIPPING_FNAME\"]")
	WebElement fn;

	@FindBy(xpath = "//*[@id=\"SHIPPING_LNAME\"]")
	WebElement ln;

	@FindBy(xpath = "//*[@id=\"SIGNUP_CHECKOUT_EMAIL\"]")
	WebElement email;

	@FindBy(xpath = "//*[@id=\"SHIPPING_STREET\"]")
	WebElement address;

	@FindBy(xpath = "//*[@id=\"SHIPPING_CITY\"]")
	WebElement city;

	@FindBy(xpath = "//*[@id=\"SHIPPING_ZIP\"]")
	WebElement zip;

	@FindBy(xpath = "//*[@id=\"SHIPPING_PHONE\"]")
	WebElement phone;

	@FindBy(xpath = "//*[@id=\"billing-address\"]/div[1]/div/input")
	WebElement sameAsBilling;

	@FindBy(xpath = "//*[@id=\"buttons-container\"]/div/div[1]/div/div[1]")
	WebElement payPalPayNow;

	/************************** This is a Country drop down handling part **************************/	

	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[1]/div/button")	
	WebElement coun;	
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[1]/div/div/div/ul/li")		
	java.util.List<WebElement> shipping_country;	


	/************************** This is a State drop down handling part **************************/	
	
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/button/div/div/div")	
	WebElement shipping_StateClick1;
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/button/div/div ")	
	WebElement shipping_StateClick2;
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/button/div  ")	
	WebElement shipping_StateClick3;
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/button ")	
	WebElement shipping_StateClick4;
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div")	
	WebElement shipping_StateClick5;
	
	  
	    
	        
	
	
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/div/div[2]/ul/li")		  
	java.util.List<WebElement> shipping_state_list; 	
	
	
	
	@FindBy(xpath = "//*[@id=\"form-checkout\"]/div[3]/div[2]/div/div/div[2]/ul/li")	
	WebElement SelectedState;	
	
	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[3]/p")		  
	WebElement service;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[4]/div")		  
	WebElement selectServiceClick;
	
	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[4]/div/div/div/ul/li")		   
	java.util.List<WebElement> selectService;	
	
	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[4]/div/button/div/div/div")
	WebElement selectedService;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[6]/div/button")	
	WebElement shipbyClick;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[6]/div/div/div/ul/li")		  
	java.util.List<WebElement> shipbySelect;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[4]/div/div[1]/div[6]/div/button/div/div/div")
	WebElement selectedShipment;

	@FindBy(xpath = "//*[@id=\"stripe-btn\"]")		  
	WebElement payWithStripeBtn;

	@FindBy(xpath = "//*[@id=\"email\"]")		  
	WebElement stripeEmail;

	@FindBy(xpath = "//*[@id=\'cardNumber\']")		  
	WebElement stripeCardNo;

	@FindBy(xpath = "//*[@id=\'cardExpiry\']")		  
	WebElement stripeExpiry;

	@FindBy(xpath = "//*[@id=\'billingName\']")		  
	WebElement cardHolderName;

	@FindBy(xpath = "//*[@id=\'cardCvc\']")		  
	WebElement stripeCVC;

	/*This is a SELCT list of regions we have to implement*/
	@FindBy(xpath = "//*[@id=\'billingCountry\']")		  
	WebElement stripeRegion;

	@FindBy(xpath = "//*[@id=\'card-tab-panel\']/div/div[4]/button")		  
	WebElement stripeFinalPayment;
	
	@FindBy(xpath = "//*[@id=\'content\']/div/div[1]/div[1]/h4")		  
	WebElement verifyOrderConfirmationMessagePage;

	@FindBy(xpath = "//*[@id=\"content\"]/div[1]/div/div[2]/div[1]/ul/li[3]")
	WebElement tax;

	String taxVerifi;
	String serviceName;
	String ExemptedStates;



	//Constructor for Initializing the Page Objects
	public GuestCheckoutFlow() throws Throwable
	{
		PageFactory.initElements(driver, this); 
	}

	public void NonExistingUserGuest(String fname, String lname, String eml, String add, String cty, String zp, String phn) throws InterruptedException
	{

		TestUtil.DemandHubChat();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		categoryClick.click();
		Thread.sleep(10000);
		increaseQuantity.click();
		Thread.sleep(2000);
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		addToCart.click();
		Thread.sleep(2000);
		viewcart.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		gotoCheckout.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		fn.sendKeys(fname);
		ln.sendKeys(lname);
		email.sendKeys(eml);
		address.sendKeys(add);
		city.sendKeys(cty);
		zip.sendKeys(zp);
		phone.sendKeys(phn);
		Thread.sleep(2000);
		/*sameAsBilling.click();
		Thread.sleep(2000);
		payPalPayNow.click();	
		Thread.sleep(3000);
		coun.click();	
		Thread.sleep(2000);*/

		try 
		{
			for(int i=0; i<=shipping_country.size() ; i++)
			{
				if(shipping_country.get(i).getText().contains("United"))
				{
					shipping_country.get(i).click();
					break;
				}
			}
		}
		catch(Exception indexoutofboundException)
		{
			throw indexoutofboundException;
		}

		Thread.sleep(1000);
		
		try
		{
			shipping_StateClick1.click();
		}
		catch(Exception e)
		{
			System.out.println("This is 1");
		}
		try
		{
			shipping_StateClick2.click();
		}
		catch(Exception e)
		{
			System.out.println("This is 2");
		}
		try
		{
			shipping_StateClick3.click();
		}
		catch(Exception e)
		{
			System.out.println("This is 3");
		}
		try
		{
			shipping_StateClick4.click();
		}
		catch(Exception e)
		{
			System.out.println("This is 4");
		}
		try
		{
			shipping_StateClick5.click();
		}
		catch(Exception e)
		{
			System.out.println("This is 5");
		}
		
	
/*
		for(int i=0; i<=shipping_state_list.size(); i++)
		{
			System.out.println(shipping_state_list.get(i).getText());				

			if(shipping_state_list.get(i).getText().contains("Arizona")) 
			{ 
				shipping_state_list.get(i).click(); 
				break; 
			}			 
		}

		/***********************Service and Shipping Selection************************/	


		/*Thread.sleep(1000);
		sameAsBilling.click();

		Thread.sleep(1000);
		if(service.isDisplayed())
		{	
			Thread.sleep(1000);
			selectServiceClick.click();
			Thread.sleep(2000);

			for(int i=0; i<=selectService.size(); i++)
			{
				if(selectService.get(i).getText().contains("Fed"))
				{
					selectService.get(i).click();
					break;
				}
			}	

			if(selectedService.getText().contentEquals(prop.getProperty("service_type_two")))
			{
				Thread.sleep(2000);			
				shipbyClick.click();
				Thread.sleep(2000);

				for(int i=0; i<=shipbySelect.size(); i++)
				{
					System.out.println(shipbySelect.get(i).getText());

					if(shipbySelect.get(i).getText().contains("Grou"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("Prio"))
					{
						shipbySelect.get(i).click();
						break;
					}		
					else if(shipbySelect.get(i).getText().contains("Econ"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("2Day"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("2Day AM"))
					{
						shipbySelect.get(i).click();
						break;
					}
					else if(shipbySelect.get(i).getText().contains("Express Saver"))
					{
						shipbySelect.get(i).click();
						break;
					}
				}
			}
			/***********************Service and Shipping Selection************************/	


			/* Stripe form filling */

			/*payWithStripeBtn.click(); 
			Thread.sleep(3000);
			stripeEmail.click();
			stripeEmail.sendKeys(prop.getProperty("stripeEmail"));
			stripeCardNo.click();
			stripeCardNo.sendKeys(prop.getProperty("stripeCardno"));
			stripeExpiry.click();
			stripeExpiry.sendKeys(prop.getProperty("stripeExpiry"));
			stripeCVC.click();
			stripeCVC.sendKeys(prop.getProperty("stripeCVC"));
			cardHolderName.click();
			cardHolderName.sendKeys(prop.getProperty("stripeName"));
			stripeRegion.click();
			Select regionList = new Select(stripeRegion);
			regionList.selectByVisibleText("Pakistan");		
			stripeFinalPayment.click();
			driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
			assertTrue(verifyOrderConfirmationMessagePage.isDisplayed(), "Order confirmation message page did not appear");
	
		}*/
	}

	/*public void Tax(String fname, String lname, String eml, String add, String cty, String zp, String phn) throws InterruptedException
	{
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		categoryClick.click();
		Thread.sleep(10000);
		increaseQuantity.click();
		Thread.sleep(2000);
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		addToCart.click();
		Thread.sleep(2000);
		viewcart.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);
		gotoCheckout.click();
		driver.manage().timeouts().implicitlyWait(TestUtil.ImplicitWait, TimeUnit.SECONDS);		
		fn.sendKeys(fname);
		ln.sendKeys(lname);
		email.sendKeys(eml);
		address.sendKeys(add);
		city.sendKeys(cty);
		zip.sendKeys(zp);
		phone.sendKeys(phn);
		Thread.sleep(2000);
		payPalPayNow.click();	
		Thread.sleep(3000);

		coun.click();	
		Thread.sleep(2000);
		try 
		{
			for(int i=0; i<=shipping_country.size() ; i++)
			{
				if(shipping_country.get(i).getText().contains("United"))
				{
					shipping_country.get(i).click();
					break;
				}
			}
		}
		catch(Exception indexoutofboundException)
		{
			throw indexoutofboundException;
		}

		Thread.sleep(1000);
		shipping_StateClick.click();	
		Thread.sleep(1000);	

		for(int i=0; i<=shipping_state_list.size(); i++)
		{
			if(shipping_state_list.get(i).getText().contains("New Mexico")) 
			{ 
				shipping_state_list.get(i).click(); 
				break; 
			}		
		}

		/*String[] Values = new String[state.size()];

		for(int i=0; i<=state.size(); i++)
		{
			if(!state.contains("select state"))
			{
				java.util.Iterator<WebElement> itr = state.iterator();

				while(itr.hasNext())
				{
					Values[i] = itr.next().toString();
				}
			}			
		}

		for(int i=0; i<=Values.length; i++)
		{			
			System.out.println(Values[i].toString());
		}*/

		/***********************Service and shipping Selection************************/	


	    /*Thread.sleep(3000);
		sameAsBilling.click();

		Thread.sleep(1000);
		if(service.isDisplayed())
		{	
			Thread.sleep(1000);
			//selectServiceClick.click();
			Thread.sleep(2000);*/

			/*for(int i=0; i<=selectService.size(); i++)
			{
				if(selectService.get(i).getText().contains("Fed"))
				{
					selectService.get(i).click();
					break;
				}
			}*/


			/****************** Tax Verification ********************/			

		/*	int option = 0;

			if(selectedService.getText().contentEquals(prop.getProperty("service_type_one")))
			{
				option = 1;
			}
			else if(selectedService.getText().contentEquals(prop.getProperty("service_type_two")))
			{
				option = 2;
			}

			switch(option)
			{
			case 1:
				System.out.println("This is Local Pickup. There is no TAX. :)");
				break;			

			case 2:
				System.out.println("Selected State is " + SelectedState.getText());

				try 
				{
					for(int i=0; i<=TestData.ExemptedStateList.length; i++)
					{	
						if(TestData.ExemptedStateList[i].contentEquals(SelectedState.getText()))
						{
							System.out.println(TestData.ExemptedStateList[i]+ " is exempted from TAX");
							System.out.println("This is selected TAX : " + tax.getText().toString());				            
							int actualTax = TestUtil.testTax(tax.getText().toString());						            
							assertTrue(actualTax==0, "Tax is greater than ZERO. It should be Zero");      
							break;
						}
					}
				}
				catch(Exception e)
				{

				}

				break;


			}
		}
		/****************** Tax Verification ********************/	
	}

	/*@Test
	public void brokernLinks() throws IOException, InterruptedException
	{
		int counter =0;
		int i=0;
		java.util.List<WebElement> links = driver.findElements(By.tagName("a"));
		System.out.println("Total links we have on main page are: " + links.size());

		for(i=0; i<links.size(); i++)
		{
			WebElement linkElement = links.get(i);
			String url = linkElement.getAttribute("href");
			System.out.println(url);

			if(!url.contains("tel:216-800-9300") && !url.contains("null"))
			{
				System.out.println(url);
				URL link = new URL(url);
				HttpURLConnection httpConn= (HttpURLConnection)link.openConnection();
			}
			if(httpConn.getResponseCode() != 200)
			{
				System.out.println(link + " is broken");
				counter++;
			}

		}
	}*/
//}
